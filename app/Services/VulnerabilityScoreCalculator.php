<?php

namespace App\Services;

use App\Models\VulnerabilityAssessment;
use App\Models\HousingAssessment;
use App\Models\AssetOwnership;
use App\Models\EconomicProfile;

class VulnerabilityScoreCalculator
{
    /**
     * Calculate total vulnerability score
     */
    public function calculateTotalScore(VulnerabilityAssessment $assessment): float
    {
        $housingScore = $this->calculateHousingScore($assessment);
        $servicesScore = $this->calculateServicesScore($assessment);
        $foodSecurityScore = $this->calculateFoodSecurityScore($assessment);
        $assetScore = $this->calculateAssetScore($assessment);
        $familyScore = $this->calculateFamilyVulnerabilityScore($assessment);

        $totalScore = $housingScore + $servicesScore + $foodSecurityScore + $assetScore + $familyScore;

        // Update the assessment with calculated scores
        $assessment->update([
            'housing_score' => $housingScore,
            'services_score' => $servicesScore,
            'food_security_score' => $foodSecurityScore,
            'asset_score' => $assetScore,
            'family_vulnerability_score' => $familyScore,
            'total_vulnerability_score' => $totalScore,
            'vulnerability_level' => $this->determineVulnerabilityLevel($totalScore),
            'poverty_category' => $this->determinePovertyCategory($totalScore),
        ]);

        return $totalScore;
    }

    /**
     * Calculate comprehensive score (for secondary bursary)
     */
    public function calculateComprehensiveScore(VulnerabilityAssessment $assessment): float
    {
        // Same as total score but with more detailed analysis
        $score = $this->calculateTotalScore($assessment);

        // Additional analysis for secondary bursary
        $this->performDetailedAnalysis($assessment);

        return $score;
    }

    /**
     * Calculate housing quality score
     */
    private function calculateHousingScore(VulnerabilityAssessment $assessment): float
    {
        $housing = $assessment->housingAssessment;
        if (!$housing) return 30; // Default medium vulnerability if no data

        $score = 0;

        // Roof material scoring (0-25 points)
        $roofScores = [
            'grass_wood_thatch' => 25,
            'iron_sheets' => 15,
            'asbestos_sheets' => 10,
            'asbestos_tiles' => 8,
            'other_non_asbestos_tile' => 5,
            'concrete' => 0
        ];
        $score += $roofScores[$housing->roof_material] ?? 15;

        // Floor material scoring (0-20 points)
        $floorScores = [
            'earth_sand' => 20,
            'palm_bamboo' => 15,
            'wood_planks' => 10,
            'finished_floor_wood_tiles' => 5,
            'concrete' => 2,
            'vinyl' => 0
        ];
        $score += $floorScores[$housing->floor_material] ?? 20;

        // Wall material scoring (0-15 points)
        $wallScores = [
            'natural_walls_mud_cane' => 15,
            'rudimentary_walls_stone_bamboo' => 10,
            'finished_walls_bricks_cement' => 0
        ];
        $score += $wallScores[$housing->wall_material] ?? 15;

        return min($score, 60);
    }

    /**
     * Calculate basic services score
     */
    private function calculateServicesScore(VulnerabilityAssessment $assessment): float
    {
        $housing = $assessment->housingAssessment;
        if (!$housing) return 20; // Default medium vulnerability

        $score = 0;

        // Water source scoring
        $waterScores = [
            'shallow_well' => 15,
            'well' => 10,
            'other' => 8,
            'piped' => 0
        ];
        $score += $waterScores[$housing->water_source] ?? 10;

        // Toilet location scoring
        if ($housing->toilet_location === 'outside_house') {
            $score += 10;
        }

        // Electricity scoring
        if (!$housing->has_electricity) {
            $score += 10;
        }

        return min($score, 35);
    }

    /**
     * Calculate food security score
     */
    private function calculateFoodSecurityScore(VulnerabilityAssessment $assessment): float
    {
        $housing = $assessment->housingAssessment;
        if (!$housing) return 10; // Default moderate vulnerability

        switch ($housing->meals_per_day) {
            case 1:
                return 20;
            case 2:
                return 10;
            case 3:
            default:
                return 0;
        }
    }

    /**
     * Calculate asset ownership score (inverse scoring)
     */
    private function calculateAssetScore(VulnerabilityAssessment $assessment): float
    {
        $assets = $assessment->assetOwnerships->first();
        if (!$assets) return 15; // Default medium vulnerability

        $score = 20; // Start with maximum vulnerability

        // Reduce score for productive assets
        if ($assets->has_tractor) $score -= 5;
        if ($assets->has_plough) $score -= 2;
        if ($assets->has_hammer_mill) $score -= 3;
        if ($assets->has_car_truck) $score -= 4;
        if ($assets->has_generator) $score -= 2;
        if ($assets->has_water_pump) $score -= 2;
        if ($assets->has_solar_panel) $score -= 2;

        // Livestock scoring
        if ($assets->cattle_count > 0) $score -= min($assets->cattle_count * 0.5, 3);
        if ($assets->goats_count > 0) $score -= min($assets->goats_count * 0.2, 2);
        if ($assets->sheep_count > 0) $score -= min($assets->sheep_count * 0.2, 2);
        if ($assets->pigs_count > 0) $score -= min($assets->pigs_count * 0.3, 2);
        if ($assets->poultry_count > 0) $score -= min($assets->poultry_count * 0.1, 1);

        return max($score, 0);
    }

    /**
     * Calculate family vulnerability score
     */
    private function calculateFamilyVulnerabilityScore(VulnerabilityAssessment $assessment): float
    {
        $economic = $assessment->economicProfile;
        if (!$economic) return 25; // Default medium-high vulnerability

        $score = 0;

        // Income reliability scoring
        $reliabilityScores = [
            'very_unreliable' => 15,
            'unreliable' => 10,
            'reliable' => 5,
            'very_reliable' => 0
        ];
        $score += $reliabilityScores[$economic->income_reliability] ?? 10;

        // Dependency ratio scoring
        if ($economic->dependency_ratio > 2.0) $score += 10;
        elseif ($economic->dependency_ratio > 1.0) $score += 5;

        // Financial stress indicators
        if (!$economic->has_savings) $score += 5;
        if ($economic->has_debt) $score += 5;
        if (!$economic->can_afford_emergency_expense) $score += 5;

        // Vulnerable household members
        if ($economic->disabled_members_count > 0) $score += 5;
        if ($economic->elderly_count > 0) $score += 3;

        return min($score, 50);
    }

    /**
     * Determine vulnerability level based on total score
     */
    private function determineVulnerabilityLevel(float $score): string
    {
        if ($score >= 140) return 'critical';
        if ($score >= 100) return 'high';
        if ($score >= 60) return 'medium';
        return 'low';
    }

    /**
     * Determine poverty category based on score
     */
    private function determinePovertyCategory(float $score): string
    {
        if ($score >= 130) return 'extremely_poor';
        if ($score >= 90) return 'poor';
        if ($score >= 50) return 'moderately_poor';
        return 'not_poor';
    }

    /**
     * Perform detailed analysis for comprehensive assessment
     */
    private function performDetailedAnalysis(VulnerabilityAssessment $assessment): void
    {
        $housing = $assessment->housingAssessment;
        $assets = $assessment->assetOwnerships->first();
        $economic = $assessment->economicProfile;

        $analysisNotes = [];

        // Housing analysis
        if ($housing) {
            if ($housing->roof_material === 'grass_wood_thatch') {
                $analysisNotes[] = 'High housing vulnerability due to thatch roof';
            }
            if ($housing->meals_per_day <= 2) {
                $analysisNotes[] = 'Food insecurity indicated by limited meals per day';
            }
            if (!$housing->has_electricity) {
                $analysisNotes[] = 'Limited access to electricity affects quality of life';
            }
        }

        // Asset analysis
        if ($assets) {
            $totalLivestock = $assets->cattle_count + $assets->goats_count + $assets->poultry_count;
            if ($totalLivestock === 0) {
                $analysisNotes[] = 'No livestock ownership indicates limited productive assets';
            }
        }

        // Economic analysis
        if ($economic) {
            if ($economic->dependency_ratio > 2.0) {
                $analysisNotes[] = 'High dependency ratio indicates economic strain';
            }
            if (!$economic->has_savings && $economic->has_debt) {
                $analysisNotes[] = 'Financial stress due to debt without savings';
            }
        }

        $assessment->update([
            'assessment_notes' => implode('; ', $analysisNotes)
        ]);
    }

    /**
     * Generate recommendations based on vulnerability level
     */
    public function generateRecommendations(VulnerabilityAssessment $assessment): array
    {
        $level = $assessment->vulnerability_level;
        $score = $assessment->total_vulnerability_score;

        $recommendations = [];

        switch ($level) {
            case 'critical':
                $recommendations = [
                    'Immediate bursary approval strongly recommended',
                    'Consider emergency financial assistance',
                    'Link to food security programs',
                    'Priority for housing improvement programs',
                    'Regular monitoring and follow-up required'
                ];
                break;

            case 'high':
                $recommendations = [
                    'Strong candidate for bursary approval',
                    'Consider additional social support programs',
                    'Link to skills training opportunities',
                    'Monitor progress and provide guidance',
                    'Connect with community support networks'
                ];
                break;

            case 'medium':
                $recommendations = [
                    'Moderate priority for bursary consideration',
                    'Assess competing applications carefully',
                    'Consider vocational training alternatives',
                    'Encourage self-help group participation',
                    'Periodic review of circumstances'
                ];
                break;

            case 'low':
                $recommendations = [
                    'Lower priority for immediate bursary assistance',
                    'Consider other forms of support',
                    'Encourage savings and investment programs',
                    'Monitor for changes in circumstances',
                    'Annual review may be sufficient'
                ];
                break;
        }

        return $recommendations;
    }
}
