<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\MorphTo;

class VulnerabilityAssessment extends Model
{
    use HasFactory;

    protected $fillable = [
        'assessable_type',
        'assessable_id',
        'housing_score',
        'services_score',
        'food_security_score',
        'asset_score',
        'family_vulnerability_score',
        'total_vulnerability_score',
        'vulnerability_level',
        'poverty_category',
        'assessment_date',
        'assessed_by_id',
        'assessment_notes',
        'requires_verification',
        'is_verified',
        'verified_at',
        'verified_by_id',
    ];

    protected $casts = [
        'housing_score' => 'decimal:2',
        'services_score' => 'decimal:2',
        'food_security_score' => 'decimal:2',
        'asset_score' => 'decimal:2',
        'family_vulnerability_score' => 'decimal:2',
        'total_vulnerability_score' => 'decimal:2',
        'assessment_date' => 'date',
        'requires_verification' => 'boolean',
        'is_verified' => 'boolean',
        'verified_at' => 'datetime',
    ];

    // Polymorphic relationship
    public function assessable(): MorphTo
    {
        return $this->morphTo();
    }

    // Relationships
    public function assessedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'assessed_by_id');
    }

    public function verifiedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'verified_by_id');
    }

    public function housingAssessment(): HasOne
    {
        return $this->hasOne(HousingAssessment::class);
    }

    public function assetOwnerships(): HasMany
    {
        return $this->hasMany(AssetOwnership::class);
    }

    public function economicProfile(): HasOne
    {
        return $this->hasOne(EconomicProfile::class);
    }

    // Calculate total vulnerability score
    public function calculateTotalScore(): float
    {
        $total = $this->housing_score +
                $this->services_score +
                $this->food_security_score +
                $this->asset_score +
                $this->family_vulnerability_score;

        $this->update(['total_vulnerability_score' => $total]);

        return $total;
    }

    // Determine vulnerability level based on score
    public function determineVulnerabilityLevel(): string
    {
        $score = $this->total_vulnerability_score;

        if ($score >= 80) return 'critical';
        if ($score >= 60) return 'high';
        if ($score >= 40) return 'medium';
        return 'low';
    }

    // Determine poverty category
    public function determinePovertyCategory(): string
    {
        $score = $this->total_vulnerability_score;

        if ($score >= 75) return 'extremely_poor';
        if ($score >= 50) return 'poor';
        if ($score >= 25) return 'moderately_poor';
        return 'not_poor';
    }

    // Scope for high vulnerability
    public function scopeHighVulnerability($query)
    {
        return $query->whereIn('vulnerability_level', ['high', 'critical']);
    }

    // Scope for verified assessments
    public function scopeVerified($query)
    {
        return $query->where('is_verified', true);
    }
}
