<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\VulnerabilityAssessment;
use App\Models\HousingAssessment;
use App\Models\AssetOwnership;
use App\Models\EconomicProfile;

class VulnerabilityController extends Controller
{
    /**
     * Real-time Vulnerability Score Calculation
     */
    public function calculateRealTimeScore(Request $request)
    {
        try {
            $data = $request->all();

            // Calculate individual scores
            $housingScore = $this->calculateHousingScore($data['housing'] ?? []);
            $servicesScore = $this->calculateServicesScore($data['housing'] ?? []);
            $foodScore = $this->calculateFoodSecurityScore($data['housing'] ?? []);
            $assetScore = $this->calculateAssetScore($data['assets'] ?? []);
            $familyScore = $this->calculateFamilyScore($data['economic'] ?? []);

            $totalScore = $housingScore + $servicesScore + $foodScore + $assetScore + $familyScore;

            // Determine levels
            $vulnerabilityLevel = $this->determineVulnerabilityLevel($totalScore);
            $povertyCategory = $this->determinePovertyCategory($totalScore);
            $priorityLevel = $this->determinePriorityLevel($totalScore);

            return response()->json([
                'success' => true,
                'vulnerability_assessment' => [
                    'scores' => [
                        'housing' => round($housingScore, 2),
                        'services' => round($servicesScore, 2),
                        'food_security' => round($foodScore, 2),
                        'assets' => round($assetScore, 2),
                        'family' => round($familyScore, 2),
                        'total' => round($totalScore, 2)
                    ],
                    'levels' => [
                        'vulnerability' => $vulnerabilityLevel,
                        'poverty' => $povertyCategory,
                        'priority' => $priorityLevel
                    ],
                    'recommendations' => $this->getRecommendations($vulnerabilityLevel, $totalScore),
                    'eligibility' => $this->assessEligibility($totalScore, $vulnerabilityLevel)
                ]
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error calculating vulnerability score',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Get Vulnerability Breakdown
     */
    public function getVulnerabilityBreakdown(Request $request)
    {
        try {
            $data = $request->all();

            $breakdown = [
                'housing' => [
                    'score' => $this->calculateHousingScore($data['housing'] ?? []),
                    'factors' => $this->getHousingFactors($data['housing'] ?? [])
                ],
                'services' => [
                    'score' => $this->calculateServicesScore($data['housing'] ?? []),
                    'factors' => $this->getServicesFactors($data['housing'] ?? [])
                ],
                'food_security' => [
                    'score' => $this->calculateFoodSecurityScore($data['housing'] ?? []),
                    'factors' => $this->getFoodSecurityFactors($data['housing'] ?? [])
                ],
                'assets' => [
                    'score' => $this->calculateAssetScore($data['assets'] ?? []),
                    'factors' => $this->getAssetFactors($data['assets'] ?? [])
                ],
                'family' => [
                    'score' => $this->calculateFamilyScore($data['economic'] ?? []),
                    'factors' => $this->getFamilyFactors($data['economic'] ?? [])
                ]
            ];

            return response()->json([
                'success' => true,
                'breakdown' => $breakdown
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error generating vulnerability breakdown',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Validate Assessment Data
     */
    public function validateAssessmentData(Request $request)
    {
        $rules = [
            'housing.ownership_type' => 'required|in:owned,rented,inherited,sublet,other',
            'housing.roof_material' => 'required|string',
            'housing.floor_material' => 'required|string',
            'housing.wall_material' => 'required|string',
            'housing.toilet_location' => 'required|in:inside_house,outside_house',
            'housing.water_source' => 'required|string',
            'housing.has_electricity' => 'required|boolean',
            'housing.meals_per_day' => 'required|integer|min:1|max:5',

            'assets.cattle_count' => 'nullable|integer|min:0',
            'assets.goats_count' => 'nullable|integer|min:0',
            'assets.poultry_count' => 'nullable|integer|min:0',

            'economic.household_size' => 'required|integer|min:1',
            'economic.estimated_monthly_income' => 'nullable|numeric|min:0',
            'economic.has_savings' => 'required|boolean',
            'economic.has_debt' => 'required|boolean',
        ];

        $validator = \Validator::make($request->all(), $rules);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'errors' => $validator->errors(),
                'message' => 'Validation failed'
            ], 422);
        }

        return response()->json([
            'success' => true,
            'message' => 'Assessment data is valid'
        ]);
    }

    // Private helper methods (same as in VulnerabilityAssessmentController)
    private function calculateHousingScore(array $housing): float
    {
        $score = 0;

        $roofScores = [
            'grass_wood_thatch' => 25, 'iron_sheets' => 15, 'asbestos_sheets' => 10,
            'asbestos_tiles' => 8, 'other_non_asbestos_tile' => 5, 'concrete' => 0
        ];
        $score += $roofScores[$housing['roof_material'] ?? 'iron_sheets'] ?? 15;

        $floorScores = [
            'earth_sand' => 20, 'palm_bamboo' => 15, 'wood_planks' => 10,
            'finished_floor_wood_tiles' => 5, 'concrete' => 2, 'vinyl' => 0
        ];
        $score += $floorScores[$housing['floor_material'] ?? 'earth_sand'] ?? 20;

        $wallScores = [
            'natural_walls_mud_cane' => 15, 'rudimentary_walls_stone_bamboo' => 10,
            'finished_walls_bricks_cement' => 0
        ];
        $score += $wallScores[$housing['wall_material'] ?? 'natural_walls_mud_cane'] ?? 15;

        return min($score, 60);
    }

    private function calculateServicesScore(array $housing): float
    {
        $score = 0;

        $waterScores = ['shallow_well' => 15, 'well' => 10, 'other' => 8, 'piped' => 0];
        $score += $waterScores[$housing['water_source'] ?? 'well'] ?? 10;

        if (($housing['toilet_location'] ?? 'outside_house') === 'outside_house') $score += 10;
        if (!($housing['has_electricity'] ?? false)) $score += 10;

        return min($score, 35);
    }

    private function calculateFoodSecurityScore(array $housing): float
    {
        $mealsPerDay = $housing['meals_per_day'] ?? 2;
        return match($mealsPerDay) {
            1 => 20, 2 => 10, default => 0
        };
    }

    private function calculateAssetScore(array $assets): float
    {
        $score = 20;

        if ($assets['has_tractor'] ?? false) $score -= 5;
        if ($assets['has_car_truck'] ?? false) $score -= 4;
        if ($assets['has_plough'] ?? false) $score -= 2;

        $cattleCount = $assets['cattle_count'] ?? 0;
        if ($cattleCount > 0) $score -= min($cattleCount * 0.5, 3);

        return max($score, 0);
    }

    private function calculateFamilyScore(array $economic): float
    {
        $score = 0;

        $reliabilityScores = [
            'very_unreliable' => 15, 'unreliable' => 10, 'reliable' => 5, 'very_reliable' => 0
        ];
        $score += $reliabilityScores[$economic['income_reliability'] ?? 'unreliable'] ?? 10;

        if (!($economic['has_savings'] ?? false)) $score += 5;
        if ($economic['has_debt'] ?? false) $score += 5;

        return min($score, 50);
    }

    private function determineVulnerabilityLevel(float $score): string
    {
        return match(true) {
            $score >= 140 => 'critical',
            $score >= 100 => 'high',
            $score >= 60 => 'medium',
            default => 'low'
        };
    }

    private function determinePovertyCategory(float $score): string
    {
        return match(true) {
            $score >= 130 => 'extremely_poor',
            $score >= 90 => 'poor',
            $score >= 50 => 'moderately_poor',
            default => 'not_poor'
        };
    }

    private function determinePriorityLevel(float $score): string
    {
        return match(true) {
            $score >= 120 => 'urgent',
            $score >= 80 => 'high',
            $score >= 40 => 'medium',
            default => 'low'
        };
    }

    private function getRecommendations(string $vulnerabilityLevel, float $score): array
    {
        return match($vulnerabilityLevel) {
            'critical' => [
                'Immediate approval recommended',
                'Priority consideration for emergency support',
                'Comprehensive social assistance needed',
                'Regular monitoring required'
            ],
            'high' => [
                'Strong candidate for approval',
                'Consider additional support programs',
                'Monitor progress closely',
                'Link to community programs'
            ],
            'medium' => [
                'Moderate priority for consideration',
                'Standard application process',
                'Periodic review recommended',
                'Consider skill development programs'
            ],
            'low' => [
                'Lower priority application',
                'Consider self-help programs',
                'Annual review sufficient',
                'Monitor for status changes'
            ]
        };
    }

    private function assessEligibility(float $score, string $vulnerabilityLevel): array
    {
        $isEligible = $score >= 40; // Minimum vulnerability threshold
        $confidenceLevel = match($vulnerabilityLevel) {
            'critical' => 'very_high',
            'high' => 'high',
            'medium' => 'medium',
            'low' => 'low'
        };

        return [
            'is_eligible' => $isEligible,
            'confidence_level' => $confidenceLevel,
            'threshold_met' => $score >= 40,
            'minimum_required_score' => 40,
            'current_score' => $score
        ];
    }

    // Factor analysis methods for detailed breakdown
    private function getHousingFactors(array $housing): array
    {
        return [
            'roof_vulnerability' => $this->getRoofVulnerability($housing['roof_material'] ?? 'iron_sheets'),
            'floor_vulnerability' => $this->getFloorVulnerability($housing['floor_material'] ?? 'earth_sand'),
            'wall_vulnerability' => $this->getWallVulnerability($housing['wall_material'] ?? 'natural_walls_mud_cane')
        ];
    }

    private function getServicesFactors(array $housing): array
    {
        return [
            'water_access' => $housing['water_source'] ?? 'well',
            'sanitation' => $housing['toilet_location'] ?? 'outside_house',
            'electricity' => $housing['has_electricity'] ?? false
        ];
    }

    private function getFoodSecurityFactors(array $housing): array
    {
        $meals = $housing['meals_per_day'] ?? 2;
        return [
            'meals_per_day' => $meals,
            'food_security_level' => match($meals) {
                1 => 'severe_insecurity',
                2 => 'moderate_insecurity',
                default => 'adequate'
            }
        ];
    }

    private function getAssetFactors(array $assets): array
    {
        return [
            'livestock_count' => ($assets['cattle_count'] ?? 0) + ($assets['goats_count'] ?? 0),
            'productive_assets' => ($assets['has_tractor'] ?? false) || ($assets['has_plough'] ?? false),
            'transportation' => $assets['has_car_truck'] ?? false
        ];
    }

    private function getFamilyFactors(array $economic): array
    {
        return [
            'income_stability' => $economic['income_reliability'] ?? 'unreliable',
            'financial_cushion' => $economic['has_savings'] ?? false,
            'debt_burden' => $economic['has_debt'] ?? false,
            'household_size' => $economic['household_size'] ?? 1
        ];
    }

    private function getRoofVulnerability(string $material): string
    {
        return match($material) {
            'grass_wood_thatch' => 'very_high',
            'iron_sheets' => 'medium',
            'asbestos_sheets', 'asbestos_tiles' => 'low',
            'concrete' => 'very_low',
            default => 'medium'
        };
    }

    private function getFloorVulnerability(string $material): string
    {
        return match($material) {
            'earth_sand' => 'very_high',
            'palm_bamboo' => 'high',
            'wood_planks' => 'medium',
            'finished_floor_wood_tiles', 'concrete', 'vinyl' => 'low',
            default => 'high'
        };
    }

    private function getWallVulnerability(string $material): string
    {
        return match($material) {
            'natural_walls_mud_cane' => 'high',
            'rudimentary_walls_stone_bamboo' => 'medium',
            'finished_walls_bricks_cement' => 'low',
            default => 'medium'
        };
    }
}
