<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\VulnerabilityAssessment;
use App\Models\HousingAssessment;
use App\Models\AssetOwnership;
use App\Models\EconomicProfile;

class VulnerabilityAssessmentController extends Controller
{
    /**
     * Calculate Real-time Vulnerability Score
     */
    public function calculateScore(Request $request)
    {
        try {
            $housingScore = $this->calculateHousingScore($request->housing ?? []);
            $servicesScore = $this->calculateServicesScore($request->housing ?? []);
            $foodSecurityScore = $this->calculateFoodSecurityScore($request->housing ?? []);
            $assetScore = $this->calculateAssetScore($request->assets ?? []);
            $familyScore = $this->calculateFamilyVulnerabilityScore($request->economic ?? []);

            $totalScore = $housingScore + $servicesScore + $foodSecurityScore + $assetScore + $familyScore;

            $vulnerabilityLevel = $this->determineVulnerabilityLevel($totalScore);
            $povertyCategory = $this->determinePovertyCategory($totalScore);

            return response()->json([
                'success' => true,
                'scores' => [
                    'housing_score' => $housingScore,
                    'services_score' => $servicesScore,
                    'food_security_score' => $foodSecurityScore,
                    'asset_score' => $assetScore,
                    'family_vulnerability_score' => $familyScore,
                    'total_score' => $totalScore,
                ],
                'vulnerability_level' => $vulnerabilityLevel,
                'poverty_category' => $povertyCategory,
                'recommendations' => $this->getRecommendations($vulnerabilityLevel, $totalScore)
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error calculating vulnerability score',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Calculate Housing Quality Score
     */
    private function calculateHousingScore(array $housing): float
    {
        $score = 0;

        // Roof material scoring (0-25 points)
        $roofScores = [
            'grass_wood_thatch' => 25,
            'iron_sheets' => 15,
            'asbestos_sheets' => 10,
            'asbestos_tiles' => 8,
            'other_non_asbestos_tile' => 5,
            'concrete' => 0
        ];
        $score += $roofScores[$housing['roof_material'] ?? 'iron_sheets'] ?? 15;

        // Floor material scoring (0-20 points)
        $floorScores = [
            'earth_sand' => 20,
            'palm_bamboo' => 15,
            'wood_planks' => 10,
            'finished_floor_wood_tiles' => 5,
            'concrete' => 2,
            'vinyl' => 0
        ];
        $score += $floorScores[$housing['floor_material'] ?? 'earth_sand'] ?? 20;

        // Wall material scoring (0-15 points)
        $wallScores = [
            'natural_walls_mud_cane' => 15,
            'rudimentary_walls_stone_bamboo' => 10,
            'finished_walls_bricks_cement' => 0
        ];
        $score += $wallScores[$housing['wall_material'] ?? 'natural_walls_mud_cane'] ?? 15;

        return min($score, 60);
    }

    /**
     * Calculate Basic Services Score
     */
    private function calculateServicesScore(array $housing): float
    {
        $score = 0;

        // Water source scoring
        $waterScores = [
            'shallow_well' => 15,
            'well' => 10,
            'other' => 8,
            'piped' => 0
        ];
        $score += $waterScores[$housing['water_source'] ?? 'well'] ?? 10;

        // Toilet location scoring
        if (($housing['toilet_location'] ?? 'outside_house') === 'outside_house') {
            $score += 10;
        }

        // Electricity scoring
        if (!($housing['has_electricity'] ?? false)) {
            $score += 10;
        }

        return min($score, 35);
    }

    /**
     * Calculate Food Security Score
     */
    private function calculateFoodSecurityScore(array $housing): float
    {
        $mealsPerDay = $housing['meals_per_day'] ?? 2;

        switch ($mealsPerDay) {
            case 1:
                return 20;
            case 2:
                return 10;
            case 3:
            default:
                return 0;
        }
    }

    /**
     * Calculate Asset Score (inverse - fewer assets = higher vulnerability)
     */
    private function calculateAssetScore(array $assets): float
    {
        $score = 20; // Start with maximum vulnerability score

        // Reduce score for each asset owned
        if ($assets['has_tractor'] ?? false) $score -= 5;
        if ($assets['has_plough'] ?? false) $score -= 2;
        if ($assets['has_hammer_mill'] ?? false) $score -= 3;
        if ($assets['has_car_truck'] ?? false) $score -= 4;
        if ($assets['has_generator'] ?? false) $score -= 2;
        if ($assets['has_water_pump'] ?? false) $score -= 2;
        if ($assets['has_solar_panel'] ?? false) $score -= 2;

        // Livestock scoring
        $cattleCount = $assets['cattle_count'] ?? 0;
        $goatsCount = $assets['goats_count'] ?? 0;
        $sheepCount = $assets['sheep_count'] ?? 0;
        $pigsCount = $assets['pigs_count'] ?? 0;
        $poultryCount = $assets['poultry_count'] ?? 0;

        if ($cattleCount > 0) $score -= min($cattleCount * 0.5, 3);
        if ($goatsCount > 0) $score -= min($goatsCount * 0.2, 2);
        if ($sheepCount > 0) $score -= min($sheepCount * 0.2, 2);
        if ($pigsCount > 0) $score -= min($pigsCount * 0.3, 2);
        if ($poultryCount > 0) $score -= min($poultryCount * 0.1, 1);

        return max($score, 0);
    }

    /**
     * Calculate Family Vulnerability Score
     */
    private function calculateFamilyVulnerabilityScore(array $economic): float
    {
        $score = 0;

        // Income reliability scoring
        $reliabilityScores = [
            'very_unreliable' => 15,
            'unreliable' => 10,
            'reliable' => 5,
            'very_reliable' => 0
        ];
        $score += $reliabilityScores[$economic['income_reliability'] ?? 'unreliable'] ?? 10;

        // Dependency ratio scoring
        $dependencyRatio = $economic['dependency_ratio'] ?? 1.0;
        if ($dependencyRatio > 2.0) $score += 10;
        elseif ($dependencyRatio > 1.0) $score += 5;

        // Financial stress indicators
        if (!($economic['has_savings'] ?? false)) $score += 5;
        if ($economic['has_debt'] ?? false) $score += 5;
        if (!($economic['can_afford_emergency_expense'] ?? false)) $score += 5;

        // Vulnerable household members
        if (($economic['disabled_members_count'] ?? 0) > 0) $score += 5;
        if (($economic['elderly_count'] ?? 0) > 0) $score += 3;

        return min($score, 50);
    }

    /**
     * Determine Vulnerability Level
     */
    private function determineVulnerabilityLevel(float $score): string
    {
        if ($score >= 140) return 'critical';
        if ($score >= 100) return 'high';
        if ($score >= 60) return 'medium';
        return 'low';
    }

    /**
     * Determine Poverty Category
     */
    private function determinePovertyCategory(float $score): string
    {
        if ($score >= 130) return 'extremely_poor';
        if ($score >= 90) return 'poor';
        if ($score >= 50) return 'moderately_poor';
        return 'not_poor';
    }

    /**
     * Get Recommendations Based on Score
     */
    private function getRecommendations(string $vulnerabilityLevel, float $score): array
    {
        $recommendations = [];

        switch ($vulnerabilityLevel) {
            case 'critical':
                $recommendations = [
                    'High priority for bursary approval',
                    'Consider additional social support programs',
                    'Immediate intervention required',
                    'Monitor closely for emergency assistance needs'
                ];
                break;

            case 'high':
                $recommendations = [
                    'Strong candidate for bursary approval',
                    'Consider vocational training programs',
                    'Link to microfinance opportunities',
                    'Regular monitoring recommended'
                ];
                break;

            case 'medium':
                $recommendations = [
                    'Moderate priority for bursary consideration',
                    'Assess specific needs carefully',
                    'Consider skills development programs',
                    'Periodic review recommended'
                ];
                break;

            case 'low':
                $recommendations = [
                    'Lower priority for immediate assistance',
                    'Consider self-help group programs',
                    'Monitor for changes in circumstances',
                    'Annual review sufficient'
                ];
                break;
        }

        return $recommendations;
    }

    /**
     * Generate Vulnerability Assessment Report
     */
    public function generateReport(VulnerabilityAssessment $assessment)
    {
        $assessment->load(['housingAssessment', 'assetOwnerships', 'economicProfile']);

        return view('admin.vulnerability.report', compact('assessment'));
    }
}
